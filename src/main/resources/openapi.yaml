openapi: 3.0.2
info:
  title: Petme3 API
  version: '0.1'
servers:
  - url: 'https://api.server.test/v1'
paths:
  /v1/login:
    post:
      summary: 로그인
      tags:
        - 로그인(9p)
      description: |
        12p 로그인 버튼 클릭시 호출.<br>
        sns 로그인의 경우 sns가 sns식별자 + login_id, access_token을 password로 넘긴다.<br>
        예) login_id: kakao_2787125117, password: xjfRbePXz0jujIv9pQufV0YBFpGYpSl0xtYjVq-ZCj10aQAAAYgPJzRP<br>
        uuid는 native app에서 ui로 전달한다<br>
        단말기 uuid 참고 정보: https://developer.android.com/training/articles/user-data-ids?hl=kohttps://www.hooni.net/xe/study/2273<
        ```
        -- 사용자 테스트
        INSERT INTO tb_user (login_id, email, password, phone, receive_information_yn)
        VALUES ('ilovecorea@gmal.com', 'ilovecorea@gmail.com', SHA2('1234', 256), '01033204796', 'y');

        -- 로그인
        SELECT id, login_id, user_name, email  
          FROM tb_user 
        WHERE login_id = :login_id 
          AND password = SHA2(:password, 256);

        -- 로그인 이력
        INSERT INTO tb_user_login_history(tb_user_id, login_id, login_time, login_ip, access_status)
        VALUES(:tb_user_id, :login_id, now(), NULL, '접속중');

        -- 로그인 이력 테스트
        INSERT INTO tb_user_login_history(tb_user_id, login_id, login_time, login_ip, access_status)
        VALUES(8, 'ilovecorea@gmail.com', now(), NULL, '접속중');

        -- 디바이스 정보 테스트
        INSERT INTO tb_device
        (tb_user_id, `uuid`, login_id, os, modify_time, register_time)
        VALUES(8, '72330df0-b49e-4020-aab1-ef80b6670f23', 'ilovecorea@gmail.com', 'Android 4.4.2', now(), now());

        -- 디바이스 정보 수정
        UPDATE tb_device
          SET tb_user_id=:tb_user_id, login_id=:login_id, modify_time=now()
        WHERE uuid=:uuid;

        ```
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - login_id
                - password
                - uuid
              properties:
                loginId:
                  $ref: '#/components/schemas/loginId'
                password:
                  $ref: '#/components/schemas/password'
                uuid:
                  $ref: '#/components/schemas/uuid'
      responses:
        '200':
          description: 성공
          content:
            application/json:
              schema:
                type: object
                required:
                  - token
                properties:
                  token:
                    $ref: '#/components/schemas/token'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /v1/emails/check:
    get:
      summary: 이메일 중복 체크
      tags:
        - 로그인(9p)
      description: |
        13p 중복확인 클릭시 호출<br>
        응답이 200이면 중복, 204인 경우 정상<br>
        쿼리 결과가 0이면 204, 쿼리 결과가 0보다 크면 200을 리턴한다.<br>
        ```
        SELECT COUNT(1)
          FROM tb_user
         WHERE email = :email;
        ```
      parameters:
        - name: email
          in: query
          description: 이메일
          required: true
          schema:
            $ref: '#/components/schemas/email'
      responses:
        '204':
          description: 정상
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /v1/users/logout:
    post:
      summary: 로그아웃
      tags:
        - 마이-내정보수정(35p)
      description: |
        36p 로그아웃 링크 클릭시 호출.<br>
        서버에 로그아웃 이력을 추가하고 쿠키 또는 로컬 스토리지의 인증 토큰을 삭제한다.<br>
        ```
        -- 로그아웃 이력
        INSERT INTO tb_user_login_history(tb_user_id, login_id, login_time, login_ip, access_status)
        VALUES(:tb_user_id, :login_id, now(), NULL, '로그아웃');
        ```
      security:
        - bearerAuth: []
      responses:
        '200':
          description: 성공
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /v1/users:
    get:
      security:
        - bearerAuth: []
      summary: 내정보 조회
      tags:
        - 마이-메인(27p)
      description: |
        28p 내정보 조회.<br>
        receive_information_yn 필드는 설정 > 알림 설정에 사용한다.<br>
        <font color=red><b>사용자의 현제 포인트 정보를 어디서 가져오는지 알 수 없어 current_point 필드 추가함.</b></font><br>
        ```
        -- :tb_user_id 는 인증 토큰에서 참조한다.
        SELECT 
          user_name, 
          email, 
          current_point,
          receive_information_yn,
          (SELECT count(1) FROM tb_review WHERE tb_user_id = 39) AS review_count,
          (SELECT count(1) FROM tb_watchlist WHERE tb_user_id = 39) AS watch_count
        FROM tb_user
        WHERE id = :tb_user_id;
        ```
      responses:
        '200':
          description: 정상
          content:
            application/json:
              schema:
                type: object
                required:
                  - user_name
                  - email
                  - review_count
                  - current_point
                  - watch_count
                  - receive_information_yn
                properties:
                  user_name:
                    $ref: '#/components/schemas/userName'
                  email:
                    $ref: '#/components/schemas/email'
                  review_count:
                    $ref: '#/components/schemas/reviewCount'
                  current_point:
                    $ref: '#/components/schemas/currentPoint'
                  watch_count:
                    $ref: '#/components/schemas/watchCount'
                  receive_information_yn:
                    $ref: '#/components/schemas/receiveInformationYn'
    post:
      summary: 회원 가입
      tags:
        - 로그인(9p)
      description: |
        13p 회원 가입 요청.<br>
        <font color=red><b>sns 회원 가입의 경우 휴대폰 번호를 수집할 수 없다.</b></font><br>
        이메일 중복 체크가 필요(19p).<br>
        ```
          -- otp 검증
          SELECT otp
            FROM tb_otp
           WHERE phone = :phone
             AND otp = :otp
             AND expiration_time > NOW();
          -- 이메일 체크
          SELECT COUNT(1) 
            FROM tb_user
          WHERE email = :email;
          -- 회원가입
          INSERT INTO tb_user (login_id, email, password, phone, receive_information_yn)
          VALUES (:login_id, :email, SHA2(:password, 256), :phone, :receive_information_yn);
        ```
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - login_id
                - password
                - phone
                - otp
                - receive_information_yn
              properties:
                login_id:
                  $ref: '#/components/schemas/loginId'
                password:
                  $ref: '#/components/schemas/password'
                phone:
                  $ref: '#/components/schemas/phone'
                otp:
                  $ref: '#/components/schemas/otp'
                receive_information_yn:
                  $ref: '#/components/schemas/receiveInformationYn'
      responses:
        '201':
          description: 성공
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /v1/opts:
    post:
      summary: 인증번호 전송
      tags:
        - 이메일주소 찾기/비밀번호 찾기(14p)
      description: |
        휴대폰 인증을 위해 sms로 otp를 발송.<br>
        <font color=red><b>sms 발송 시스템 없음.</b></font>
        ```
          INSERT INTO tb_otp(phone, otp, register_time)
          VALUES (:phone, :otp, NOW());
        ```
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                phone:
                  $ref: '#/components/schemas/phone'
              required:
                - phone
      responses:
        '201':
          description: 성공
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /v1/emails:
    get:
      summary: 이메일주소 찾기
      tags:
        - 이메일주소 찾기/비밀번호 찾기(14p)
      description: |
        기획서 15p 이메일주소 찾기 클릭시.<br>
        otp 인증 필요함.<br>
        ```
          -- otp 검증
          SELECT otp
            FROM tb_otp
           WHERE phone = :phone
             AND otp = :otp
             AND expiration_time > NOW();
          -- email 조회
          SELECT email 
            FROM tb_user 
           WHERE phone = :phone;
        ```
      parameters:
        - name: phone
          in: query
          description: 휴대폰
          required: true
          schema:
            $ref: '#/components/schemas/phone'
        - name: otp
          in: query
          description: otp
          required: true
          schema:
            $ref: '#/components/schemas/otp'
      responses:
        '200':
          description: 이메일
          content:
            application/json:
              schema:
                type: object
                properties:
                  email:
                    $ref: '#/components/schemas/email'
                required:
                  - email
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /v1/passwords:
    get:
      summary: 비밀번호 찾기
      tags:
        - 이메일주소 찾기/비밀번호 찾기(14p)
      description: |
        17p 비밀번호 찾기 클릭.<br>
        ```
          -- otp 검증
          SELECT otp
            FROM tb_otp
            WHERE phone = :phone
              AND otp = :otp
              AND expiration_time > NOW();
        ```
      parameters:
        - name: phone
          in: query
          description: 휴대폰
          required: true
          schema:
            $ref: '#/components/schemas/phone'
        - name: otp
          in: query
          description: otp
          required: true
          schema:
            $ref: '#/components/schemas/otp'
      responses:
        '200':
          description: 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    $ref: '#/components/schemas/code'
                required:
                  - code
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
    put:
      tags:
        - 이메일주소 찾기/비밀번호 찾기(14p)
      summary: 비밀번호 재설정
      description: |
        18p 확인 버튼 클릭.<br>
        17p 요청값인 phone과 응답으로 받은 code, password를 요청으로 전송한다.<br>
        ```
          -- code 검증
          SELECT otp
            FROM tb_otp
            WHERE phone = '01012341234'
              AND otp = '123456'
              AND expiration_time > NOW();
          -- password 재설정
          UPDATE tb_user
             SET password = SHA2('password', 256)
          WHERE phone = '01012341234';
        ```
        ## 시퀀스 다이어그램
        ![diagram](http://101.101.208.77/images/find-password.png)
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                phone:
                  $ref: '#/components/schemas/phone'
                code:
                  $ref: '#/components/schemas/code'
                password:
                  $ref: '#/components/schemas/password'
              required:
                - phone
                - otp
                - password
      responses:
        '200':
          description: 성공
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /v1/users/name:
    put:
      tags:
        - 마이-내정보수정(35p)
      summary: 내정보 수정-이름
      description: |
        37p 닉네임 수정.<br>
        사용자 정보는 인증토큰을 참조한다.<br>
        ```
          UPDATE tb_user
             SET user_name = :user_name
           WHERE id = :tb_user_id;
        ```
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_name:
                  $ref: '#/components/schemas/userName'
              required:
                - user_name
      responses:
        '200':
          description: Ok
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /v1/users/password:
    put:
      tags:
        - 마이-내정보수정(35p)
      summary: 내정보 수정-비밀번호 수정
      description: |
        38p 비밀번호 변경.<br>
        사용자 정보는 인증토큰을 참조한다.<br>
        ```
          UPDATE tb_user
            SET password = SHA2(:new_password, 256)
          WHERE id = :tb_user_id
            AND password = SHA2(:password, 256);
        ```
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                password:
                  $ref: '#/components/schemas/password'
                new_password:
                  $ref: '#/components/schemas/newPassword'
              required:
                - password
                - new_password
      responses:
        '200':
          description: 성공
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /v1/users/phone:
    put:
      tags:
        - 마이-내정보수정(35p)
      summary: 휴대폰번호 변경
      description: |
        39p 내정보 수정-휴대폰번호.<br>
        사용자 정보는 인증토큰을 참조한다.<br>
        ```
        -- code 검증
          SELECT otp
            FROM tb_otp
            WHERE phone = :phone
              AND otp = :otp
              AND expiration_time > NOW();
              
        -- 휴대폰번호 갱신
        -- :tb_user_id는 인증 토큰에서 참조
        UPDATE tb_user
           SET phone = :phone
         WHERE id = :tb_user_id;
        ```
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                phone:
                  $ref: '#/components/schemas/phone'
                otp:
                  $ref: '#/components/schemas/otp'
              required:
                - phone
                - otp
      responses:
        '200':
          description: 성공
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /v1/users/notification:
    put:
      tags:
        - 마이-설정(31p)
      summary: 내정보 설정
      description: |
        32p 내정보 수정-알림.<br>
        사용자 정보는 인증토큰을 참조한다.<br>
        ```
        -- 알림 수정
        UPDATE tb_user
           SET receive_information_yn = 'n'
         WHERE id = :tb_user_id;
        ```
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                receive_information_yn:
                  $ref: '#/components/schemas/receiveInformationYn'
              required:
                - receive_information_yn
      responses:
        '200':
          description: 성공
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
    get:
      tags:
        - 마이-설정(31p)
      summary: 내정보-알림설정
      description: |
        32p 내정보 조회-알림<br>
        버전정보는 DB에서 관리하지 않는다<br>
        ```
        -- 알림 수정
        -- :tb_user_id는 인증 토큰에서 참조
        SELECT receive_information_yn
          FROM tb_user 
         WHERE id = :tb_user_id;
        ```
      security:
        - bearerAuth: []
      responses:
        '200':
          description: 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  receive_information_yn:
                    $ref: '#/components/schemas/receiveInformationYn'
                required:
                  - receive_information_yn
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /v1/users/withdrawal:
    post:
      tags:
        - 마이-내정보수정(35p)
      summary: 회원 탈퇴
      description: |
        41p 회원 탈퇴.<br>
        회원 탈퇴 처리 후 로그아웃 처리한다.<br>
        사용자 정보 인증토큰 참조.<br>
        ```
        UPDATE tb_user 
           SET use_yn = 'n',
               withdrawal_date = now(),
               withdrawal_cause = :withrawal_cause,
               receive_information_yn = 'n',
               modify_time = now()
         WHERE id = :tb_user_id;
        ```
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                reason:
                  $ref: '#/components/schemas/withdrawalCause'
      responses:
        '200':
          description: 성공
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /v1/users/reviews:
    get:
      tags:
        - 마이-리뷰(43p)
      summary: 내 리뷰 목록
      description: |
        44p 마이-리뷰.<br>
        <font color=red><b>tb_file에 tb_review_id 컬럼 추가함.</b></font><br>
        ```
        -- 내가 쓴 리뷰
        SELECT 
            r.id AS review_id, 
            (TRIM(p.ranking) + 0) AS ranking,
            TRIM(p.NAME) AS place_name,
            DATE_FORMAT(r.register_time , '%Y.%m.%d') AS register_time,
            r.keyword,
            r.content
          FROM tb_place AS p, tb_review AS r
        WHERE p.id = r.tb_place_id
          AND r.tb_user_id = 2
        ORDER BY ranking DESC;

        -- 내가 쓴 리뷰 이미지 목록
        SELECT CONCAT('http://', full_path, '/', save_name) image_url
          FROM tb_file a, tb_server b, tb_review c
         WHERE a.tb_server_id = b.id
           AND a.tb_review_id = c.id
          AND a.tb_user_id = :tb_user_id;
        ```
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          required: true
          description: 페이지 번호
          schema:
            $ref: '#/components/schemas/page'
        - name: size
          in: query
          required: true
          description: 페이지 사이즈
          schema:
            $ref: '#/components/schemas/size'
      responses:
        '200':
          description: 성공
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    review_id:
                      $ref: '#/components/schemas/reviewId'
                    ranking:
                      $ref: '#/components/schemas/ranking'
                    place_name:
                      $ref: '#/components/schemas/placeNam'
                    register_time:
                      $ref: '#/components/schemas/registerTime'
                    keyword:
                      $ref: '#/components/schemas/keyword'
                    content:
                      $ref: '#/components/schemas/content'
                    image_urls:
                      type: array
                      items:
                        $ref: '#/components/schemas/imageUrl'
                  required:
                    - review_id
                    - grade
                    - place_name
                    - register_time
                    - keyword
                    - content
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  '/v1/users/reviews/{review_id}':
    delete:
      tags:
        - 마이-리뷰(43p)
      summary: 리뷰 삭제
      description: |
        44p 마이-리뷰 삭제<br>
        <font color=red><b>tb_file에 tb_review_id 컬럼 추가함.</b></font><br>
        ```
        -- 내가 쓴 리뷰 삭제
        DELETE FROM tb_review 
         WHERE id = :review_id
           AND tb_user_id = :tb_user_id;

        -- 내가 쓴 리뷰의 파일 삭제
        DELETE FROM tb_file
         WHERE tb_review_id = :tb_review_id
           AND tb_user_id = tb_user_id; 
        ```
      security:
        - bearerAuth: []
      parameters:
        - name: review_id
          in: path
          required: true
          description: 리뷰 아이디
          schema:
            $ref: '#/components/schemas/reviewId'
      responses:
        '200':
          description: 성공
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /v1/users/points:
    get:
      tags:
        - 마이-포인트(46p)
      summary: 포인트 사용 내역(작성중)
      description: |
        47p 마이-포인트.<br>
        <font color=red><b>포인트 관리 추가 테이블 필요함.</b></font><br>
        <font color=red><b>포인트 이력과 장소 연결고리 없음.</b></font><br>
        ```
        -- 사용 가능한 포인트, 적립 예정 포인트, 당월 소멸 포인트
        -- 포인트 적립/사용 내역 

        ```
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          required: true
          description: 페이지 번호
          schema:
            $ref: '#/components/schemas/page'
        - name: size
          in: query
          required: true
          description: 페이지 사이즈
          schema:
            $ref: '#/components/schemas/size'
      responses:
        '200':
          description: 성공
          content:
            application/json:
              schema:
                type: object
                required:
                  - current_point
                  - point_histories
                properties:
                  currentPoint:
                    $ref: '#/components/schemas/currentPoint'
                  pointHistories:
                    type: array
                    items:
                      type: object
                      properties:
                        pointGubun:
                          $ref: '#/components/schemas/pointGubun'
                        usedPoint:
                          $ref: '#/components/schemas/usedPoint'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /v1/users/watches/places:
    get:
      tags:
        - 마이-찜(50p)
      summary: 마이찜-장소
      description: |
        52p 마이-찜-장소.<br>
        ranking 쿼리에 tb_watchlist 조인하여 tb_user_id로 검색.<br>
        ```
        SET @req_latitude = 37.49982439110407;
        SET @req_longitude = 127.02794437971482;
        SELECT 
          X.id,
          X.place_id, 
          X.ranking,
          X.total_review_count, 
          X.street_name_address,
          X.distance, 
          X.place_name, 
          X.image_url
        FROM (
          SELECT 
            PLACE.id,
            PLACE.id as place_id, 
            (TRIM(PLACE.ranking) + 0) AS ranking, 
            (IFNULL(PLACE.blog_review_count, 0) + IFNULL(PLACE.visitor_review_count, 0)) AS total_review_count, 
            PLACE.street_name_address,
            @rest_meter := ROUND(ST_Distance_Sphere(POINT(PLACE.longitude, PLACE.latitude), POINT(@req_longitude, @req_latitude))) AS dummy, 
            IF (@rest_meter > 1000, CONCAT(CONVERT(ROUND(@rest_meter/1000, 1), CHAR), 'km'), 
              CONCAT(CONVERT(@rest_meter, CHAR), 'm')) AS distance, 
            TRIM(PLACE.NAME) AS place_name, 
            IF (PLACE.id NOT IN(SELECT b.id FROM tb_file a, tb_place b WHERE b.id = a.tb_place_id), '', 
              (SELECT original_name FROM tb_file 
                WHERE tb_place_id = PLACE.id AND gubun = 'image|장소-업체사진' LIMIT 1)) AS image_url 
          FROM
            tb_place AS PLACE, tb_watchlist AS WATCH
          WHERE
            (PLACE.NAME REGEXP :req_business_gubun OR 
            PLACE.hashtag REGEXP :req_business_gubun OR 
            PLACE.business_gubun REGEXP :req_business_gubun AND 
            PLACE.street_name_address LIKE '')  
            AND ST_Distance_Sphere(POINT(PLACE.longitude, PLACE.latitude), POINT(@req_longitude, @req_latitude)) between 0 AND 5000
            AND WATCH.tb_place_id = PLACE.id
            AND WATCH.tb_user_id = :tb_user_id
          ORDER BY ranking DESC
        ) AS X;  
        ```
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          required: true
          description: 페이지 번호
          schema:
            $ref: '#/components/schemas/page'
        - name: size
          in: query
          required: true
          description: 페이지 사이즈
          schema:
            $ref: '#/components/schemas/size'
      responses:
        '200':
          description: 성공
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    place_id:
                      $ref: '#/components/schemas/placeId'
                    place_name:
                      $ref: '#/components/schemas/placeNam'
                    period:
                      $ref: '#/components/schemas/period'
                    ranking:
                      $ref: '#/components/schemas/ranking'
                    blog_review_count:
                      $ref: '#/components/schemas/blogReviewCount'
                    visitor_review_count:
                      $ref: '#/components/schemas/visitorReviewCount'
                    distance:
                      $ref: '#/components/schemas/distance'
                    openYn:
                      $ref: '#/components/schemas/openYn'
                    openTime:
                      $ref: '#/components/schemas/openTime'
                    image_url:
                      $ref: '#/components/schemas/imageUrl'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /v1/users/watches/contents:
    get:
      tags:
        - 마이-찜(50p)
      summary: 마이찜-콘텐츠
      description: |
        52p 마이-찜-콘텐츠.<br>
        사용자 정보는 인증 토큰을 참조.<br>
        펫미 Q&A 쿼리에 tb_watchlist 조인하여 tb_user_id로 검색.<br>
        ```
        -- 펫미 콘텐츠는 반드시 이미지가 존재해야 한다.
        SELECT 
          r.category,
          r.title title,
          r.hashtag,
          DATE_FORMAT(r.register_time , '%Y.%m.%d') AS register_time,
          (SELECT CONCAT('http://', full_path, '/', save_name)
            FROM tb_server s, tb_file f
              WHERE s.id = f.tb_server_id 
                AND f.tb_pet_raboratory_id = r.id
                AND f.gubun = 'image|펫연구소-메인') AS main_imgate_url,
            (SELECT CONCAT('http://', full_path, '/', save_name)
            FROM tb_server s, tb_file f
              WHERE s.id = f.tb_server_id 
                AND f.tb_pet_raboratory_id = r.id
                AND f.gubun = 'image|펫연구소-상세') AS su_imgate_url
        FROM tb_pet_raboratory r, tb_watchlist w, tb_user u
        WHERE w.tb_pet_raboratory_id = r.id
          AND w.tb_user_id = :tb_user_id;
        ```
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          required: true
          description: 페이지 번호
          schema:
            $ref: '#/components/schemas/page'
        - name: size
          in: query
          required: true
          description: 페이지 사이즈
          schema:
            $ref: '#/components/schemas/size'
      responses:
        '200':
          description: 성공
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    category:
                      $ref: '#/components/schemas/category'
                    title:
                      $ref: '#/components/schemas/title'
                    hashtag:
                      $ref: '#/components/schemas/hashtag'
                    main_image_url:
                      $ref: '#/components/schemas/imageUrl'
                    sub_image_url:
                      $ref: '#/components/schemas/imageUrl'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /v1/users/watches/qnas:
    get:
      tags:
        - 마이-찜(50p)
      summary: 마이찜-Q&A
      description: |
        52p 마이-찜-펫 연구소 Q&A<br>
        펫미 Q&A 쿼리에 tb_watchlist 조인하여 tb_user_id로 검색.<br>
        ```
        -- 찜한 글
        SELECT 
          a.id AS qna_id, 
          category, 
          title, 
          content, 
          writer, 
          DATE_FORMAT(a.write_time , '%Y.%m.%d') AS write_time,
          (SELECT count(1) FROM tb_petme_qna WHERE a.id = parent_id AND `depth` = 1) comment_count
          FROM tb_petme_qna a, tb_watchlist b
         WHERE b.tb_user_id = :tb_user_id
           AND b.tb_petme_qna_id = a.id
           AND a.parent_id = 0;

        -- 파일 목록
        SELECT CONCAT('http://', full_path, '/', save_name) image_url
          FROM tb_file a, tb_server b, tb_review c
         WHERE a.tb_server_id = b.id
          AND a.tb_petme_qna_id = c.id
          AND a.tb_petme_qna_id = :tb_petme_qna_id;
        ```
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          required: true
          description: 페이지 번호
          schema:
            $ref: '#/components/schemas/page'
        - name: size
          in: query
          required: true
          description: 페이지 사이즈
          schema:
            $ref: '#/components/schemas/size'
      responses:
        '200':
          description: 성공
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    qna_id:
                      $ref: '#/components/schemas/qnaId'
                    category:
                      $ref: '#/components/schemas/category'
                    title:
                      $ref: '#/components/schemas/title'
                    content:
                      $ref: '#/components/schemas/content'
                    writer:
                      $ref: '#/components/schemas/writer'
                    comment_count:
                      $ref: '#/components/schemas/commentCount'
                    write_time:
                      $ref: '#/components/schemas/writeTime'
                    image_urls:
                      type: array
                      items:
                        $ref: '#/components/schemas/imageUrl'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  '/v1/users/watches/{watch_id}':
    delete:
      tags:
        - 마이-찜(50p)
      summary: 찜 삭제
      description: |
        52p 마이-찜-삭제.<br>
        ```
        DELETE FROM tb_watchlist
        WHERE id = :watch_id;
        ```
      security:
        - bearerAuth: []
      parameters:
        - name: watch_id
          in: path
          required: true
          description: 찜 아이디
          schema:
            $ref: '#/components/schemas/watchId'
      responses:
        '200':
          description: 성공
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /v1/users/qnas:
    get:
      tags:
        - 펫연구소 작성글/댓글(53p)
      summary: 펫 연구소 Q&A 작성글
      description: |
        55p 마이-펫 연구소 작성글.<br>
        파일을 하나만 가져오는지 모두 가져오는지 판단되지 않아 파일 목록 쿼리 별도로 분리.<br>
        ```
        -- 작성한 글
        SELECT category, title, content, writer, write_time,
          (SELECT count(1) FROM tb_petme_qna WHERE a.id = parent_id AND `depth` = 1) comment_count
          FROM tb_petme_qna a
         WHERE tb_user_id = :tb_user_id
           AND a.parent_id = 0;

        -- 파일 목록
        SELECT CONCAT('http://', full_path, '/', save_name) image_url
          FROM tb_file a, tb_server b, tb_review c
         WHERE a.tb_server_id = b.id
          AND a.tb_petme_qna_id = c.id
          AND a.tb_user_id = :tb_user_id
          AND a.tb_petme_qna_id = :tb_petme_qna_id;
        ```
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          required: true
          description: 페이지 번호
          schema:
            $ref: '#/components/schemas/page'
        - name: size
          in: query
          required: true
          description: 페이지 사이즈
          schema:
            $ref: '#/components/schemas/size'
      responses:
        '200':
          description: 성공
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  required:
                    - category
                    - title
                    - writer
                    - write_time
                    - comment_count
                    - image_url
                  properties:
                    category:
                      $ref: '#/components/schemas/category'
                    title:
                      $ref: '#/components/schemas/title'
                    writer:
                      $ref: '#/components/schemas/writer'
                    write_time:
                      $ref: '#/components/schemas/writeTime'
                    comment_count:
                      $ref: '#/components/schemas/commentCount'
                    image_url:
                      $ref: '#/components/schemas/imageUrl'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /v1/users/qnas/comments:
    get:
      tags:
        - 펫연구소 작성글/댓글(53p)
      summary: 펫 연구소 Q&A 댓글
      description: |
        55p 마이-펫연구소 작성 댓글.<br>
        ```
        -- 작성한 글
        SELECT category, title, content, writer, write_time,
          (SELECT count(1) FROM tb_petme_qna WHERE a.id = parent_id AND `depth` = 1) comment_count
          FROM tb_petme_qna a
         WHERE tb_user_id = :tb_user_id
           AND a.parent_id != 0
           AND a.`depth` = 1;

        -- 파일 목록
        SELECT CONCAT('http://', full_path, '/', save_name) image_url
          FROM tb_file a, tb_server b, tb_review c
         WHERE a.tb_server_id = b.id
          AND a.tb_petme_qna_id = c.id
          AND a.tb_user_id = :tb_user_id
          AND a.tb_petme_qna_id = :tb_petme_qna_id;
        ```
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          required: true
          description: 페이지 번호
          schema:
            $ref: '#/components/schemas/page'
        - name: size
          in: query
          required: true
          description: 페이지 사이즈
          schema:
            $ref: '#/components/schemas/size'
      responses:
        '200':
          description: 성공
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  required:
                    - title
                    - content
                    - write_time
                    - image_url
                  properties:
                    title:
                      $ref: '#/components/schemas/title'
                    content:
                      $ref: '#/components/schemas/content'
                    write_time:
                      $ref: '#/components/schemas/writeTime'
                    image_url:
                      $ref: '#/components/schemas/imageUrl'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /v1/users/notice:
    get:
      tags:
        - 마이-이벤트/공지사항(56p)
      summary: 마이-이벤트/공지사항
      description: |
        57p 마이-이벤트/공지사항<br> <font color=red><b>페이징이 있는건지 없는건지 모르겠다.</b></font><br> ``` SELECT 
          n.id,
          n.title,
          n.notice_gubun,
          DATE_FORMAT(n.register_time , '%Y.%m.%d') AS register_time,
          (SELECT CONCAT('http://', full_path, '/', save_name)
            FROM tb_server s, tb_file f
              WHERE s.id = f.tb_server_id 
                AND f.tb_petme_notice_id = n.id
                AND f.gubun = 'image|공지-메인') AS imgate_url
        FROM tb_petme_notice n, tb_mapping_tb_user_tb_petme_notice un WHERE n.id = un.tb_petme_notice_id
          AND un.tb_user_id = :tb_user_id;
        ```
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          required: true
          description: 페이지 번호
          schema:
            $ref: '#/components/schemas/page'
        - name: size
          in: query
          required: true
          description: 페이지 사이즈
          schema:
            $ref: '#/components/schemas/size'
      responses:
        '200':
          description: 성공
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    notice_id:
                      $ref: '#/components/schemas/noticeId'
                    title:
                      $ref: '#/components/schemas/title'
                    notice_gubun:
                      type: string
                      description: 공지사항 타입
                    register_time:
                      $ref: '#/components/schemas/registerTime'
                    image_url:
                      $ref: '#/components/schemas/imageUrl'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  '/v1/events/{event_id}':
    get:
      tags:
        - 마이-이벤트/공지사항(56p)
      summary: 이벤트 상세
      description: 58p 이벤트 상세
      security:
        - bearerAuth: []
      parameters:
        - name: event_id
          in: path
          required: true
          description: 이벤트 아이디
          schema:
            $ref: '#/components/schemas/eventId'
      responses:
        '200':
          description: 성공
          content:
            application/json:
              schema:
                type: object
                required:
                  - title
                  - content
                  - event_start_date
                  - event_end_date
                  - image_url
                properties:
                  title:
                    $ref: '#/components/schemas/title'
                  content:
                    $ref: '#/components/schemas/content'
                  event_start_date:
                    $ref: '#/components/schemas/eventStartDate'
                  event_end_date:
                    $ref: '#/components/schemas/eventEndDate'
                  image_url:
                    $ref: '#/components/schemas/imageUrl'
                  link_url:
                    $ref: '#/components/schemas/linkUrl'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  '/v1/notices/{notice_id}':
    get:
      tags:
        - 마이-이벤트/공지사항(56p)
      summary: 공지
      description: |
        59p 공지 상세.<br>
        <font color=red><b>tb_file의 gubun은 참고할 데이터가 없어 임의로 작성했다.</b></font><br>
        ```
        SELECT 
          n.id,
          n.title,
          n.notice_gubun,
          DATE_FORMAT(n.register_time , '%Y.%m.%d') AS register_time,
          (SELECT CONCAT('http://', full_path, '/', save_name)
            FROM tb_server s, tb_file f
              WHERE s.id = f.tb_server_id 
                AND f.tb_petme_notice_id = n.id
                AND f.gubun = 'image|공지-메인') AS imgate_url
        FROM tb_petme_notice n, tb_mapping_tb_user_tb_petme_notice un
        WHERE n.id = un.tb_petme_notice_id
          AND un.tb_user_id = :tb_user_id
        ```
      security:
        - bearerAuth: []
      parameters:
        - name: notice_id
          in: path
          required: true
          description: 공지사항 아이디
          schema:
            $ref: '#/components/schemas/noticeId'
      responses:
        '200':
          description: 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  title:
                    $ref: '#/components/schemas/title'
                  writer:
                    $ref: '#/components/schemas/writer'
                  writer_name:
                    $ref: '#/components/schemas/writerName'
                  content:
                    $ref: '#/components/schemas/content'
                  html_yn:
                    $ref: '#/components/schemas/htmlYn'
                  read_count:
                    $ref: '#/components/schemas/readCount'
                  register_time:
                    $ref: '#/components/schemas/registerTime'
                  link_url:
                    $ref: '#/components/schemas/linkUrl'
                  image_urls:
                    $ref: '#/components/schemas/imageUrl'
                  notice_gubun:
                    $ref: '#/components/schemas/noticeGubun'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /v1/reviews/count:
    get:
      tags:
        - 통합메인(61p)
      summary: 누적 리뷰수
      description: 메인 - 누적 리뷰수
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                type: object
                required:
                  - total_review_count
                properties:
                  total_review_count:
                    $ref: '#/components/schemas/totalReviewCount'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /v1/rankings/categories:
    get:
      tags:
        - 통합메인(61p)
      summary: 랭킹 카테고리 목록
      description: |
        62p 메인-랭킹 카테고리
        ```
        select business_gubun
          from tb_place
        group by business_gubun;
        ```
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  description: 랭킹
                  properties:
                    title:
                      $ref: '#/components/schemas/title'
                    image_url:
                      $ref: '#/components/schemas/imageUrl'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /v1/rankings:
    get:
      tags:
        - 통합메인(61p)
      summary: 메인-랭킹 목록
      description: |
        62p 메인-내주변 랭킹
        ```
          SELECT 
            (@rownum := @rownum + 1) AS number, 
            COUNT(*) OVER() AS total_count, 
            X.place_id,
            X.ranking, 
            X.total_review_count, 
            X.distance,
            X.place_name, 
            X.image_url 
          FROM
          (
            SELECT       
                a.id AS place_id,
                (TRIM(a.ranking) + 0) AS ranking,
                (IFNULL(a.blog_review_count, 0) + IFNULL(a.visitor_review_count, 0)) AS total_review_count,
                @rest_meter := ROUND(ST_Distance_Sphere(POINT(a.longitude, a.latitude), POINT(@input_longitude, @input_latitude))) '',
                IF (@rest_meter > 1000, CONCAT(CONVERT(ROUND(@rest_meter/1000, 1), CHAR), 'km'), CONCAT(CONVERT(@rest_meter, CHAR), 'm')) AS distance,
                TRIM(a.NAME) AS place_name, 
                if (a.id NOT IN(SELECT bb.id FROM tb_file aa, tb_place bb WHERE bb.id = aa.tb_place_id), '',
                  (SELECT 
                      CONCAT('http://', (SELECT z.ip1 FROM tb_server z, tb_file y WHERE z.id = y.tb_server_id AND y.tb_place_id = a.id), full_path, '/', save_name) 
                  FROM tb_file WHERE tb_place_id = a.id)) AS image_url
            FROM 
                tb_place AS a,
                (SELECT @rownum := 0) AS b,
                (SELECT @rest_meter := 0) AS c,
                (SELECT @input_longitude := 127.027528) AS d,
                (SELECT @input_latitude := 37.497637) AS e
            WHERE 
                -- (a.business_gubun = '동물병원' AND a.street_name_address like '서울 강남구%') OR 
                ST_Distance_Sphere(POINT(a.longitude, a.latitude), POINT(@input_longitude, @input_latitude)) <= 2000
            ORDER BY ranking DESC
          ) X LIMIT 4 OFFSET 0;
        ```
      parameters:
        - name: business_gubun
          in: query
          required: true
          description: 장소 구분
          schema:
            $ref: '#/components/schemas/businessGubun'
        - name: sido
          in: query
          required: true
          description: 시도
          schema:
            $ref: '#/components/schemas/sido'
        - name: sigungu
          in: query
          required: true
          description: 시군구
          schema:
            $ref: '#/components/schemas/sigungu'
        - name: latitude
          in: query
          required: true
          description: 위도 좌표
          schema:
            $ref: '#/components/schemas/latitude'
        - name: longitude
          in: query
          required: true
          description: 경도 좌표
          schema:
            $ref: '#/components/schemas/longitude'
        - name: page
          in: query
          required: true
          description: 페이지 번호(0부터 시작)
          schema:
            $ref: '#/components/schemas/page'
        - name: size
          in: query
          required: true
          description: 페이지 사이즈
          schema:
            $ref: '#/components/schemas/size'
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  description: 랭킹
                  properties:
                    total_count:
                      $ref: '#/components/schemas/totalCount'
                    place_id:
                      $ref: '#/components/schemas/placeId'
                    place_name:
                      $ref: '#/components/schemas/placeNam'
                    ranking:
                      $ref: '#/components/schemas/ranking'
                    total_review_count:
                      $ref: '#/components/schemas/totalReviewCount'
                    distance:
                      $ref: '#/components/schemas/distance'
                    image_url:
                      $ref: '#/components/schemas/imageUrl'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /v2/rankings:
    get:
      tags:
        - 랭킹(70p)
      summary: 랭킹 목록(작성중)
      description: |
        71p 랭킹-목록
        ```
        ```
      parameters:
        - name: business_gubun
          in: query
          required: true
          description: 장소 구분
          schema:
            $ref: '#/components/schemas/businessGubun'
        - name: sido
          in: query
          required: true
          description: 시도
          schema:
            $ref: '#/components/schemas/sido'
        - name: sigungu
          in: query
          required: true
          description: 시군구
          schema:
            $ref: '#/components/schemas/sigungu'
        - name: ranking_order
          in: query
          required: true
          description: 정렬 기준
          schema:
            $ref: '#/components/schemas/rankingOrder'
        - name: weekend_open_yn
          in: query
          required: true
          description: 주말 진료 여부
          schema:
            $ref: '#/components/schemas/weekendOpenYn'
        - name: all_day_open_yn
          in: query
          required: true
          description: 24시간 진료 여부
          schema:
            $ref: '#/components/schemas/allDayOpenYn'
        - name: open_yn
          in: query
          required: true
          description: 오픈 여부
          schema:
            $ref: '#/components/schemas/openYn'
        - name: latitude
          in: query
          required: true
          description: 위도 좌표
          schema:
            $ref: '#/components/schemas/latitude'
        - name: longitude
          in: query
          required: true
          description: 경도 좌표
          schema:
            $ref: '#/components/schemas/longitude'
        - name: page
          in: query
          required: true
          description: 페이지 번호
          schema:
            $ref: '#/components/schemas/page'
        - name: size
          in: query
          required: true
          description: 페이지 사이즈
          schema:
            $ref: '#/components/schemas/size'
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  description: 랭킹
                  properties:
                    place_id:
                      $ref: '#/components/schemas/placeId'
                    place_name:
                      $ref: '#/components/schemas/placeNam'
                    ranking:
                      $ref: '#/components/schemas/ranking'
                    total_review_count:
                      $ref: '#/components/schemas/totalReviewCount'
                    distance:
                      $ref: '#/components/schemas/distance'
                    all_year_round_yn:
                      $ref: '#/components/schemas/allYearRoundYn'
                    street_name_address:
                      $ref: '#/components/schemas/streetNameAddress'
                    open_status:
                      $ref: '#/components/schemas/openStatus'
                    open_time:
                      $ref: '#/components/schemas/openTime'
                    image_url:
                      $ref: '#/components/schemas/imageUrl'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /v1/reviews:
    get:
      tags:
        - 통합메인(61p)
      summary: 메인-베스트 리뷰 목록
      description: "62p 베스트 리뷰\n```\nCREATE TEMPORARY TABLE IF NOT EXISTS tb_temp_target_place AS (\n  SELECT \n    PLACE.id, \n    (TRIM(PLACE.ranking) + 0) AS ranking, \n    (IFNULL(PLACE.blog_review_count, 0) + IFNULL(PLACE.visitor_review_count, 0)) AS total_review_count, \n    @rest_meter := ROUND(ST_Distance_Sphere(POINT(PLACE.longitude, PLACE.latitude), POINT($req_longitude, $req_latitude))) AS dummy, \n    IF (@rest_meter > 1000, CONCAT(CONVERT(ROUND(@rest_meter/1000, 1), CHAR), 'km'), \n      CONCAT(CONVERT(@rest_meter, CHAR), 'm')) AS distance, \n    TRIM(PLACE.NAME) AS place_name, \n    IF (PLACE.id NOT IN(SELECT b.id FROM tb_file a, tb_place b WHERE b.id = a.tb_place_id), '', \n      (SELECT \n        CONCAT('http://', \n          (SELECT DISTINCT a.ip1 FROM tb_server a, tb_file b \n            WHERE a.id = b.tb_server_id AND b.tb_place_id = PLACE.id), full_path, '/', save_name)\n      FROM\n        tb_file\n      WHERE \n        tb_place_id = PLACE.id AND gubun = 'image|리뷰-메인')) AS image_url\n  FROM \n    tb_place AS PLACE\n  WHERE \n    $query_param\n  ORDER BY ranking DESC\n);\n\n-- SELECT * FROM tb_temp_target_place;\nSELECT \n  b.ranking, b.place_name, a.writer, a.visit_date, a.content, b.image_url\n--\t(\tSELECT FROM tb_file WHERE tb_place_id = PLACE.id AND gubun = 'image|리뷰-메인'\t) AS image_url\nFROM \n  tb_review a, tb_temp_target_place b \nWHERE \n  a.tb_place_id = b.id\nGROUP BY b.place_name\nORDER BY a.register_time ASC;\nLIMIT 5 OFFSET 0;\n  \nDROP TEMPORARY TABLE tb_temp_target_place;  \n```\n"
      parameters:
        - name: business_gubun
          in: query
          required: true
          description: 장소 구분
          schema:
            $ref: '#/components/schemas/businessGubun'
        - name: page
          in: query
          required: true
          description: 페이지 번호(0부터 시작)
          schema:
            $ref: '#/components/schemas/page'
        - name: size
          in: query
          required: true
          description: 페이지 사이즈
          schema:
            $ref: '#/components/schemas/size'
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  description: 리뷰
                  properties:
                    ranking:
                      $ref: '#/components/schemas/ranking'
                    register_time:
                      $ref: '#/components/schemas/registerTime'
                    writer:
                      $ref: '#/components/schemas/writer'
                    content:
                      $ref: '#/components/schemas/content'
                    place_name:
                      $ref: '#/components/schemas/placeNam'
                    image_url:
                      $ref: '#/components/schemas/imageUrl'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /v2/reviews:
    get:
      tags:
        - 리뷰-메인(79p)
      summary: 리뷰 목록(작성중)
      description: |
        80p 리뷰 목록
        ```
        ```
      parameters:
        - name: business_gubun
          in: query
          required: true
          description: 장소 구분
          schema:
            $ref: '#/components/schemas/businessGubun'
        - name: sido
          in: query
          required: true
          description: 시도
          schema:
            $ref: '#/components/schemas/sido'
        - name: sigungu
          in: query
          required: true
          description: 시군구
          schema:
            $ref: '#/components/schemas/sigungu'
        - name: page
          in: query
          required: true
          description: 페이지 번호(0부터 시작)
          schema:
            $ref: '#/components/schemas/page'
        - name: size
          in: query
          required: true
          description: 페이지 사이즈
          schema:
            $ref: '#/components/schemas/size'
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  description: 리뷰
                  properties:
                    grade:
                      $ref: '#/components/schemas/grade'
                    register_time:
                      $ref: '#/components/schemas/registerTime'
                    writer:
                      $ref: '#/components/schemas/writer'
                    content:
                      $ref: '#/components/schemas/content'
                    place_name:
                      $ref: '#/components/schemas/placeNam'
                    keyword:
                      $ref: '#/components/schemas/keyword'
                    image_urls:
                      type: array
                      items:
                        $ref: '#/components/schemas/imageUrl'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /v1/recommends:
    get:
      tags:
        - 통합메인(61p)
      summary: 추천 목록
      description: |
        62p 메인-추천 목록
        ```
        -- http://101.101.208.77/api/v1/site_suggestion.php?business_gubun=동물병원&street_name_address=내 주변&longitude=127.027528&latitude=37.497637
        -- SET @input_referer = "$checkReferer";  -- netlify 처리
        -- SET @input_business_gubun = "동물병원";
        -- SET @input_street_name_address = "서울 강남구%";
        -- SET @input_longitude = 127.027528;
        -- SET @input_latitude = 37.497637;
        -- SET @input_limit = 10;   -- 펫미가 추천해요 항목은 10개
        -- SET @input_offset = 0;   -- limit와 offset에는 사용자 지정변수가 들어갈 수가 없다. 참고만 하라.
        SET @input_referer = "$checkReferer";
        SET @input_business_gubun = '$req_business_gubun';  
        SET @input_street_name_address = '$req_street_name_address%';
        SET @input_longitude = $req_longitude;
        SET @input_latitude = $req_latitude;

        SELECT 
          -- X.total_count,
          X.id,
          X.ranking,
          X.total_review_count,
          X.street_name_address,
          X.distance,
          X.place_name,
          X.image_url
        FROM (
          SELECT 
            COUNT(*) OVER() AS total_count,
            PLACE.id, 
            (TRIM(PLACE.ranking) + 0) AS ranking, 
            (IFNULL(PLACE.blog_review_count, 0) + IFNULL(PLACE.visitor_review_count, 0)) AS total_review_count, 
            PLACE.street_name_address,
            @rest_meter := ROUND(ST_Distance_Sphere(POINT(PLACE.longitude, PLACE.latitude), POINT(@input_longitude, @input_latitude))) AS dummy, 
            IF (@rest_meter > 1000, CONCAT(CONVERT(ROUND(@rest_meter/1000, 1), CHAR), 'km'), 
              CONCAT(CONVERT(@rest_meter, CHAR), 'm')) AS distance, 
            TRIM(PLACE.NAME) AS place_name, 
            IF (PLACE.id NOT IN(SELECT b.id FROM tb_file a, tb_place b WHERE b.id = a.tb_place_id), '', 
              (SELECT 
              IF (STRCMP(@input_referer, 'https://statuesque-entremet-5ef58c.netlify.app/') = 0, 
                CONCAT('api', full_path, '/', save_name), 
                CONCAT('http://', 
                    (SELECT DISTINCT a.ip1 FROM tb_server a, tb_file b 
                        WHERE a.id = b.tb_server_id AND b.tb_pet_raboratory_id = PLACE.id), full_path, '/', save_name))
              FROM
                tb_file
              WHERE
                tb_place_id = PLACE.id AND gubun = 'image|장소-메인')) AS image_url 
          FROM
            tb_place AS PLACE
          WHERE
            IF (STRCMP(@input_street_name_address, '내 주변%') = 0, 
              PLACE.business_gubun = @input_business_gubun, 
              PLACE.business_gubun = @input_business_gubun AND PLACE.street_name_address LIKE @input_street_name_address)
            AND ST_Distance_Sphere(POINT(PLACE.longitude, PLACE.latitude), POINT(@input_longitude, @input_latitude)) between 10 AND 5000
          ORDER BY ranking DESC
        ) AS X LIMIT 10 OFFSET 0;  
        ```
      parameters:
        - name: business_gubun
          in: query
          required: true
          description: 장소 구분
          schema:
            $ref: '#/components/schemas/businessGubun'
        - name: sido
          in: query
          required: true
          description: 시도
          schema:
            $ref: '#/components/schemas/sido'
        - name: sigungu
          in: query
          required: true
          description: 시군구
          schema:
            $ref: '#/components/schemas/sigungu'
        - name: latitude
          in: query
          required: true
          description: 위도 좌표
          schema:
            $ref: '#/components/schemas/latitude'
        - name: longitude
          in: query
          required: true
          description: 경도 좌표
          schema:
            $ref: '#/components/schemas/longitude'
        - name: page
          in: query
          required: true
          description: 페이지 번호(0부터 시작)
          schema:
            $ref: '#/components/schemas/page'
        - name: size
          in: query
          required: true
          description: 페이지 사이즈
          schema:
            $ref: '#/components/schemas/size'
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  description: 랭킹
                  properties:
                    place_id:
                      $ref: '#/components/schemas/placeId'
                    ranking:
                      $ref: '#/components/schemas/ranking'
                    total_review_count:
                      $ref: '#/components/schemas/totalReviewCount'
                    place_name:
                      $ref: '#/components/schemas/placeNam'
                    sido:
                      $ref: '#/components/schemas/sido'
                    distance:
                      $ref: '#/components/schemas/distance'
                    image_url:
                      $ref: '#/components/schemas/imageUrl'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /v1/pet-contents:
    get:
      tags:
        - 통합메인(61p)
      summary: 펫 연구소 콘텐트 목록
      description: |
        62p 메인-팻 연구소 콘텐츠 목록<br>
        페이징 없음<br>
        ```
        SET @input_referer = "https://statuesque-entremet-5ef58c.netlify.app/";
        SELECT 
          RAB.category,
          RAB.title,
          RAB.hashtag, 
          IF (RAB.id NOT IN(SELECT b.id FROM tb_file a, tb_pet_raboratory b WHERE b.id = a.tb_pet_raboratory_id), '', 
            (SELECT 
              IF (STRCMP(@input_referer, 'https://statuesque-entremet-5ef58c.netlify.app/') = 0, 
                CONCAT('api', full_path, '/', save_name), 
                CONCAT('http://', 
                    (SELECT DISTINCT a.ip1 FROM tb_server a, tb_file b 
                        WHERE a.id = b.tb_server_id AND b.tb_pet_raboratory_id = RAB.id), full_path, '/',  '/', save_name))
            FROM tb_file
            WHERE   tb_pet_raboratory_id = RAB.id AND gubun = 'image|펫연구소-메인')) AS main_image_url,
          IF (RAB.id NOT IN(SELECT b.id FROM tb_file a, tb_pet_raboratory b WHERE b.id = a.tb_pet_raboratory_id), '', 
            (SELECT 
              CONCAT('http://', 
                  (SELECT DISTINCT a.ip1 FROM tb_server a, tb_file b 
                      WHERE a.id = b.tb_server_id AND b.tb_pet_raboratory_id = RAB.id), full_path,  '/', save_name)
            FROM
              tb_file
            WHERE 
              tb_pet_raboratory_id = RAB.id AND gubun = 'image|펫연구소-상세')) AS sub_image_url
        FROM 
          tb_pet_raboratory AS RAB,
          tb_file AS FILE
        WHERE 
          RAB.id = FILE.tb_pet_raboratory_id
        GROUP BY RAB.title;
        ```
      parameters:
        - name: page
          in: query
          required: true
          description: 페이지 번호(0부터 시작)
          schema:
            $ref: '#/components/schemas/page'
        - name: size
          in: query
          required: true
          description: 페이지 사이즈
          schema:
            $ref: '#/components/schemas/size'
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  description: 랭킹
                  properties:
                    category:
                      $ref: '#/components/schemas/category'
                    title:
                      $ref: '#/components/schemas/title'
                    hashtag:
                      $ref: '#/components/schemas/hashtag'
                    main_image_url:
                      $ref: '#/components/schemas/imageUrl'
                    sub_image_url:
                      $ref: '#/components/schemas/imageUrl'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /v1/pet-qnas:
    get:
      tags:
        - 펫연구소-Q&A-검색(118p)
      summary: 펫 연구소 Q&A 검색(작성중)
      description: |
        119p 팻 연구소 콘텐츠 목록<br>
        검색조건의 필드가 title 인지 content 인지 모르겠다<br>
        파일과 연관관계 없음<br>
        ```
        SELECT id, category, title, content, writer, write_time,
           (SELECT count(1) FROM tb_petme_qna b WHERE parent_id = a.id) AS comment_count
          FROM tb_petme_qna a
         WHERE parent_id = 0 AND use_yn = 'y'
         ORDER BY register_time DESC;
        ```
      parameters:
        - name: page
          in: query
          required: true
          description: 페이지 번호(0부터 시작)
          schema:
            $ref: '#/components/schemas/page'
        - name: size
          in: query
          required: true
          description: 페이지 사이즈
          schema:
            $ref: '#/components/schemas/size'
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  description: 랭킹
                  properties:
                    content_id:
                      $ref: '#/components/schemas/contentId'
                    category:
                      $ref: '#/components/schemas/category'
                    title:
                      $ref: '#/components/schemas/title'
                    writer:
                      $ref: '#/components/schemas/writer'
                    write_time:
                      $ref: '#/components/schemas/writeTime'
                    comment_count:
                      $ref: '#/components/schemas/commentCount'
                    image_url:
                      $ref: '#/components/schemas/imageUrl'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
    post:
      tags:
        - 펫연구소-Q&A-작성(120p)
      summary: 펫연구소-Q&A-작성(작성중)
      description: |
        121p Q&A 작성<br>
        업로드 이미지는 base64로 인코딩된 문자열 배열이다.<br>
        tb_file에 tb_petme_qna_id 참조가 없다.<br>
        ```
        -- qan 추가
        :tb_user_id는 인증 토큰에서 참조한다.
        :writer는 tb_user_id를 통해 구한다.
        INSERT INTO tb_petme_qna
        (tb_user_id, category, title, content, writer, write_time, read_count, parent_id, `order`, `depth`, use_yn, modify_time, register_time)
        VALUES(:tb_user_id, :category, :title, :content, :writer, now(), 0, 0, 0, 0, 'y', now(), now());
        -- 파일 추가
        tb_qna_id 컬럼을 tb_file 테이블에 추가해야 한다.
        INSERT INTO petme3.tb_file
        (tb_server_id, tb_user_id, tb_qna_id, original_name, save_name, full_path, `size`, width, height, `depth`, hash_type, hash, mimetype, gubun, source, main_image_yn, exposure_order, encoding, use_yn, modify_time, register_time)
        VALUES(:tb_server_id, :tb_user_id, :tb_qna_id, :original_name, :save_name, :full_path, :size, :width, :height, :depth, :hash_type, :hash, :mimetype, :gubun, :source, 'n', :exposure_order, :encoding, 'y', now(), now());
        ```
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                category:
                  $ref: '#/components/schemas/category'
                title:
                  $ref: '#/components/schemas/title'
                content:
                  $ref: '#/components/schemas/content'
                images:
                  type: array
                  items:
                    type: string
                    description: base64 인코딩된 업로드 이미지
      responses:
        '201':
          description: Created
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  '/v1/pet-qnas/{qna_id}':
    get:
      summary: 펫연구소-Q&A-상세(작성중)
      tags:
        - 펫연구소-Q&A-검색(118p)
      description: "```\nWITH RECURSIVE CTS AS (\nSELECT  id\n\t   , category\n\t   , title\n       , content\n       , parent_id\n       , `depth`\n       , CAST(id as CHAR(100)) lvl\nFROM tb_petme_qna\nWHERE parent_id = 0\n  AND id = 2\nUNION ALL\nSELECT  b.id\n\t   , b.category\n\t   , b.title\n       , b.content\n       , b.parent_id\n       , b.`depth`\n       , CONCAT(c.lvl, \",\", b.id) lvl\nFROM tb_petme_qna b\nINNER JOIN cts c\nON b.parent_id = c.id\n)\nSELECT id AS qna_id\n    , category\n    , title\n      , content\n      , parent_id\n      , `depth`\n      , lvl\nFROM cts\nORDER BY lvl;\n```\n"
      security:
        - bearerAuth: []
      parameters:
        - name: qna_id
          in: path
          required: true
          description: 장소 아이디
          schema:
            $ref: '#/components/schemas/qnaId'
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  description: 랭킹
                  properties:
                    qna_id:
                      $ref: '#/components/schemas/qnaId'
                    category:
                      $ref: '#/components/schemas/category'
                    title:
                      $ref: '#/components/schemas/title'
                    content:
                      $ref: '#/components/schemas/content'
                    image_urls:
                      type: array
                      items:
                        $ref: '#/components/schemas/imageUrl'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
    post:
      summary: 펫연구소-Q&A-상세-댓글추가(작성중)
      tags:
        - 펫연구소-Q&A-댓글작성(127p)
      description: |
        128p Q&A 댓글 작성<br>
        tb_file 테이블에 tb_petme_qna_id 필드가 없다.<br>
        ```
        -- 댓글 추가
        INSERT INTO tb_petme_qna
        (tb_user_id, content, writer, write_time, read_count, parent_id, `order`, `depth`, use_yn, modify_time, register_time)
        VALUES(:tb_user_id, :content, :writer, now(), :read_count, :parent_id, :order, :depth, 'y', now(), now());
        -- 파일 추가
        tb_qna_id 컬럼을 tb_file 테이블에 추가해야 한다.
        INSERT INTO petme3.tb_file
        (tb_server_id, tb_user_id, tb_qna_id, original_name, save_name, full_path, `size`, width, height, `depth`, hash_type, hash, mimetype, gubun, source, main_image_yn, exposure_order, encoding, use_yn, modify_time, register_time)
        VALUES(:tb_server_id, :tb_user_id, :tb_qna_id, :original_name, :save_name, :full_path, :size, :width, :height, :depth, :hash_type, :hash, :mimetype, :gubun, :source, 'n', :exposure_order, :encoding, 'y', now(), now());

        ```
      parameters:
        - name: qna_id
          in: path
          required: true
          description: 장소 아이디
          schema:
            $ref: '#/components/schemas/qnaId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                content:
                  $ref: '#/components/schemas/content'
                images:
                  $ref: '#/components/schemas/images'
      responses:
        '201':
          description: Created
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  '/v1/places/{place_id}':
    get:
      tags:
        - 장소상세-홈(90p)
      summary: 장소상세(작성중)
      description: |
        91p 장소상세-홈
        ```
        -- 주간/월간 랭킹 시작
        SET @input_business_gubun = "동물병원";
        SET @input_street_name_address = "서울 강남구%";
        SET @input_longitude = 127.027528;
        SET @input_latitude = 37.497637;
        SET @input_offset = 0;
        SET @input_place_id = 4;
        -- DATE(a.modify_time) = DATE('2023-05-19') or DATE(a.modify_time) = DATE(NOW())

        CREATE TEMPORARY TABLE IF NOT EXISTS tb_temp_target_place AS (
          SELECT 
              PLACE.id, 
              (TRIM(PLACE.ranking) + 0) AS ranking, 
              (IFNULL(PLACE.blog_review_count, 0) + IFNULL(PLACE.visitor_review_count, 0)) AS total_review_count, 
              @rest_meter := ROUND(ST_Distance_Sphere(POINT(PLACE.longitude, PLACE.latitude), POINT(@input_longitude, @input_latitude))) AS dummy, 
              IF (@rest_meter > 1000, CONCAT(CONVERT(ROUND(@rest_meter/1000, 1), CHAR), 'km'), 
                CONCAT(CONVERT(@rest_meter, CHAR), 'm')) AS distance, 
              TRIM(PLACE.NAME) AS place_name, 
              IF (PLACE.id NOT IN(SELECT b.id FROM tb_file a, tb_place b WHERE b.id = a.tb_place_id), '', 
                (SELECT 
                    CONCAT('http://', 
                      (SELECT a.ip1 FROM tb_server a, tb_file b 
                          WHERE a.id = b.tb_server_id AND b.tb_place_id = PLACE.id), full_path, '/', save_name)
                FROM
                    tb_file
                WHERE 
                    tb_place_id = PLACE.id AND gubun = 'image|장소-메인')) AS image_url 
          FROM 
              tb_place AS PLACE
          WHERE 
              PLACE.business_gubun = @input_business_gubun AND PLACE.street_name_address LIKE @input_street_name_address
        );

        SELECT rank_accumulate FROM (
        SELECT 
          (@rownum := @rownum + 1) AS rank_accumulate, 
          AVG(a.grade) AS average, 
          b.id, 
          b.place_name
        FROM
          tb_review a, tb_temp_target_place b, 
          (SELECT @rownum := 0) AS c 
        WHERE 
          a.tb_place_id = b.id
        GROUP BY b.id ORDER BY average DESC
        ) AS X WHERE X.id = @input_place_id;


        SELECT rank_weekly FROM (
        SELECT 
          (@rownum := @rownum + 1) AS rank_weekly, 
          AVG(a.grade) AS average, 
          b.id, 
          b.place_name
        FROM
          tb_review a, tb_temp_target_place b, 
          (SELECT @rownum := 0) AS c 
        WHERE 
          a.tb_place_id = b.id AND YEARWEEK(a.modify_time) = YEARWEEK('2023-05-19')
        GROUP BY b.id ORDER BY average DESC
        ) AS X WHERE X.id = @input_place_id;

        SELECT rank_monthly FROM (
        SELECT 
          (@rownum := @rownum + 1) AS rank_monthly, 
          AVG(a.grade) AS average, 
          b.id, 
          b.place_name
        FROM
          tb_review a, tb_temp_target_place b, 
          (SELECT @rownum := 0) AS c 
        WHERE 
          a.tb_place_id = b.id AND MONTH(a.modify_time) = MONTH('2023-05-19')
        GROUP BY b.id ORDER BY average DESC
        ) AS X WHERE X.id = @input_place_id;

        DROP TEMPORARY TABLE tb_temp_target_place;
        -- 주간/월간 랭킹 끝

        -- 장소 상세
        SET @input_place_id = 4;
        SELECT 
          PLACE.id AS place_id,
          IF (PLACE.id NOT IN(SELECT b.id FROM tb_file a, tb_place b WHERE b.id = a.tb_place_id), '', 
              (SELECT 
                CONCAT('http://', 
                    (SELECT distinct a.ip1 FROM tb_server a, tb_file b 
                      WHERE a.id = b.tb_server_id AND b.tb_place_id = PLACE.id), full_path, '/', save_name)
              FROM
                tb_file 
              WHERE 
                tb_place_id = PLACE.id AND gubun = 'image|장소-업체')) AS company_image_url,
          PLACE.phone,
          (SELECT content FROM tb_place_business_hours WHERE tb_place_id = @input_place_id) AS sales_hour, 
          PLACE.information_use,
          PLACE.payment_method,
          PLACE.content,
          PLACE.street_name_address,
          PLACE.lot_number_address,
          PLACE.way_to_come1
        FROM 
          tb_place AS PLACE 
        WHERE PLACE.id = @input_place_id;
        ```
      parameters:
        - name: place_id
          in: path
          required: true
          description: 장소 아이디
          schema:
            $ref: '#/components/schemas/placeId'
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  description: 랭킹
                  properties:
                    place_id:
                      $ref: '#/components/schemas/placeId'
                    company_image_url:
                      $ref: '#/components/schemas/companyImageUrl'
                    phone:
                      $ref: '#/components/schemas/phone'
                    sales_hour:
                      $ref: '#/components/schemas/salesHour'
                    information_use:
                      $ref: '#/components/schemas/informationUse'
                    payment_method:
                      $ref: '#/components/schemas/paymentMethod'
                    content:
                      $ref: '#/components/schemas/content'
                    street_name_address:
                      $ref: '#/components/schemas/streetNameAddress'
                    lot_number_address:
                      $ref: '#/components/schemas/lotNumberAddress'
                    way_to_come1:
                      $ref: '#/components/schemas/wayToCome1'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /v1/contents/counts:
    get:
      tags:
        - 메인-검색(65p)
      summary: 메인-검색 카운트
      description: |
        65p 메인-검색 결과 카운트.<br>
        <font color=red><b>검색 결과의 카운트와 장소, 콘텐츠, Q&A의 목록 API를 별도로 분리한다.</b></font><br>
        ```
        -- 검색 결과 카운트 쿼리
        SELECT 
          '장소' AS gubun,
          p.business_gubun AS gubun1, 
          COUNT(1) AS cnt
        FROM tb_place p
        WHERE p.name LIKE '%:keyword%'
        GROUP BY p.business_gubun
        UNION ALL
        SELECT 
          '콘텐츠' AS gubun,
          '' AS gubun1,
          COUNT(1) AS cnt
        FROM tb_pet_raboratory r
        WHERE r.title LIKE '%:keyword%'
        UNION ALL 
        SELECT 
          'Q&A' AS gubun,
          '' AS gubun1,
          COUNT(1) AS cnt
        FROM tb_petme_qna q
        WHERE q.title LIKE '%:keyword%';
        ```
      parameters:
        - name: keyword
          in: query
          description: 검색어
          required: true
          schema:
            $ref: '#/components/schemas/keyword'
        - name: latitude
          in: query
          required: true
          description: 위도 좌표
          schema:
            $ref: '#/components/schemas/latitude'
        - name: longitude
          in: query
          required: true
          description: 경도 좌표
          schema:
            $ref: '#/components/schemas/longitude'
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/paths/~1v1~1contents/get/responses/200/content/application~1json/schema/allOf/0'
                  - $ref: '#/paths/~1v1~1contents/get/responses/200/content/application~1json/schema/allOf/1'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /v1/contents:
    get:
      tags:
        - 메인-검색(65p)
      summary: 메인-검색
      description: |
        65p 메인-검색<br>
        ```
        -- 장소 검색
        set @req_latitude = :latitude;
        set @req_longitude = :longitude;
        SELECT 
          X.total_count,
          X.id, 
          X.place_id, 
          X.ranking,
          X.total_review_count, 
          X.street_name_address,
          X.distance, 
          X.place_name, 
          X.image_url
        FROM (
          SELECT 
            PLACE.id AS id,
            COUNT(*) OVER() AS total_count,
            PLACE.id as place_id, 
            (TRIM(PLACE.ranking) + 0) AS ranking, 
            (IFNULL(PLACE.blog_review_count, 0) + IFNULL(PLACE.visitor_review_count, 0)) AS total_review_count, 
            PLACE.street_name_address,
            @rest_meter := ROUND(ST_Distance_Sphere(POINT(PLACE.longitude, PLACE.latitude), POINT(@req_longitude, @req_latitude))) AS dummy, 
            IF (@rest_meter > 1000, CONCAT(CONVERT(ROUND(@rest_meter/1000, 1), CHAR), 'km'), 
              CONCAT(CONVERT(@rest_meter, CHAR), 'm')) AS distance, 
            TRIM(PLACE.NAME) AS place_name, 
            IF (PLACE.id NOT IN(SELECT b.id FROM tb_file a, tb_place b WHERE b.id = a.tb_place_id), '', 
              (SELECT original_name FROM tb_file 
                WHERE tb_place_id = PLACE.id AND gubun = 'image|장소-업체사진' LIMIT 1)) AS image_url 
          FROM
            tb_place AS PLACE
          WHERE
            (PLACE.NAME REGEXP :gubun OR 
            PLACE.hashtag REGEXP :gubun OR 
            PLACE.business_gubun REGEXP :_gubun)  
            AND PLACE.name like '%:keyword%'
            AND ST_Distance_Sphere(POINT(PLACE.longitude, PLACE.latitude), POINT(@req_longitude, @req_latitude)) between 0 AND 5000
          ORDER BY ranking DESC
        ) AS X LIMIT 4 OFFSET 0;  

        -- 펫연구소 콘텐츠 검색
          기존 쿼리에서 :gubun 파라미터를 category 에 대입하여 검색

        -- 펫연구소 Q&A 검색
          기존 쿼리에서 :gubun 파라미터를 category 에 대입하여 검색
        ```
      parameters:
        - name: keyword
          in: query
          description: 검색어
          required: true
          schema:
            $ref: '#/components/schemas/keyword'
        - name: latitude
          in: query
          required: true
          description: 위도 좌표
          schema:
            $ref: '#/components/schemas/latitude'
        - name: longitude
          in: query
          required: true
          description: 경도 좌표
          schema:
            $ref: '#/components/schemas/longitude'
        - name: gubun
          in: query
          required: true
          $ref: '#/components/schemas/businessGubun'
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                allOf:
                  - type: array
                    items:
                      type: object
                      properties:
                        business_gubun:
                          $ref: '#/components/schemas/businessGubun'
                        total_count:
                          $ref: '#/components/schemas/totalCount'
                        place_id:
                          $ref: '#/components/schemas/placeId'
                        place_name:
                          $ref: '#/components/schemas/placeNam'
                        ranking:
                          $ref: '#/components/schemas/ranking'
                        total_review_count:
                          $ref: '#/components/schemas/totalReviewCount'
                        distance:
                          $ref: '#/components/schemas/distance'
                        image_url:
                          $ref: '#/components/schemas/imageUrl'
                  - type: array
                    items:
                      type: object
                      properties:
                        content_id: null
                        $ref: '#/components/schemas/contentId'
                      category:
                        $ref: '#/components/schemas/category'
                      title:
                        $ref: '#/components/schemas/title'
                      hashtag:
                        $ref: '#/components/schemas/hashtag'
                      image_url:
                        $ref: '#/components/schemas/imageUrl'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /v1/devices:
    post:
      tags:
        - 기타
      summary: 디바이스 추가
      description: |
        앱 실행 후 uuid를 통해 디바이스 정보를 추가한다. ip, mac_address는 저장할 필요가 없다고 판단한다.<br>
        uuid가 이미 존재하면 modify_time을 수정한다.<br>
        사용자가 로그인을 수행하면 tb_user_id, modify_time을 수정한다.<br>
        <a href='https://developer.android.com/training/articles/user-data-ids?hl=ko' target='_blank'>안드로이드 uuid 정책</a><br>
        <a href='https://www.hooni.net/xe/study/2273' target='_blank'>ios uuid 정책</a><br>
        ```
        INSERT INTO tb_device(`uuid`, os, ip, mac_address, modify_time, register_time)
        VALUES('941780cc-5a53-4455-9cf7-835ff2bbbe1a', 'Android 4.4.2', NULL, NULL, now(), now());
        ```
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                uuid:
                  $ref: '#/components/schemas/uuid'
                os:
                  $ref: '#/components/schemas/os'
      responses:
        '200':
          description: 성공
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    allDayOpenYn:
      type: string
      description: 24시간 개점 여부
      enum:
        - 'y'
        - 'n'
    allYearRoundYn:
      type: string
      description: 연중무휴 여부
      enum:
        - 'y'
        - 'n'
    blogReviewCount:
      type: integer
      description: 블로그 리뷰수
    blogUrl:
      type: string
      description: 블라그 주소
    businessGubun:
      type: string
      description: 장소 구분
      enum:
        - 병원
        - 약국
        - 미용
        - 용품
        - 산책
        - 카페
        - 호텔
    businessHour:
      type: string
      description: 운영시간
    category:
      type: string
      description: 콘텐츠 카테고리
    code:
      type: string
      description: 확인 코드
    commentCount:
      type: integer
      description: 댓글 수
    companyImageUrl:
      type: string
      description: 장소 이미지 주소
    content:
      type: string
      description: 내용
    contentId:
      type: integer
      description: 콘텐츠 아이디
    currentPoint:
      type: integer
      description: 현재 포인트
    dailyRanking:
      type: integer
      description: 일간 랭킹
    distance:
      type: string
      description: 거리
      example: 1.2km
    email:
      type: string
      example: petme@petme.kr
      description: 이메일
    error:
      type: object
      required:
        - message
      properties:
        message:
          type: string
          example: 요청 정보가 올바르지 않습니다
          description: 에러 메세지
        cause:
          type: string
          description: 상세 메세지
    eventEndDate:
      type: string
      description: 이벤트 종료일
    eventId:
      type: integer
      description: 이벤트 아이디
    eventStartDate:
      type: string
      description: 이벤트 시작일
    facebookUrl:
      type: string
      description: 페이스북 주소
    grade:
      type: string
      description: 평점
      example: '9.5'
    hashtag:
      type: string
      description: 해시태크
    homepageUrl:
      type: string
      description: 홈페이지 주소
    htmlYn:
      type: string
      description: html yn
      enum:
        - 'y'
        - 'n'
    imageUrl:
      type: string
      description: 장소 이미지 주소
    images:
      type: array
      items:
        type: string
        description: base64 인코딩된 업로드 이미지
    informationUse:
      type: string
      description: 이용안내/정보(부가서비스포함)
    instagramUrl:
      type: string
      description: 인스타그램 주소
    keyword:
      type: string
      description: 키워드
    latitude:
      type: number
      description: 위도 좌표
    linkUrl:
      type: string
      description: 링크 주소
    loginId:
      type: string
      example: petme@petme.kr
      description: 로그인 아이디(이메일 주소 또는 sns 사용자 아이디)
    loginType:
      type: string
      description: 로그인 타입
      enum:
        - kakao
        - google
        - apple
        - email
    longitude:
      type: number
      description: 경도 좌표
    lotNumberAddress:
      type: string
      description: 지번 주소
    monthlyRanking:
      type: integer
      description: 월간 랭킹
    newPassword:
      type: string
      example: '********'
      description: 패스워드
    noticeGubun:
      type: string
      description: 공지사항 타입
    noticeId:
      type: integer
      description: 공지 아이디
    notice_gubun:
      $ref: '#/components/schemas/noticeGubun'
    openStatus:
      type: string
      description: 영업 구분
    openTime:
      type: string
      description: 영업 시작 시간
    openYn:
      type: string
      description: 영업 여부
    order:
      type: integer
      example: 1
      description: 정렬 순서
    os:
      type: string
      description: 단말기 os 정보
    otp:
      type: string
      example: '3454'
      description: otp
    page:
      type: integer
      description: 페이지 번호
      example: 1
    password:
      type: string
      example: '********'
      description: 비밀번호(사용자 비번 또는 sns 인증토큰)
    paymentMethod:
      type: string
      description: 결제 수단
    period:
      type: string
      description: 기간
      enum:
        - 일간
        - 주간
        - 월간
    phone:
      type: string
      example: '01033201234'
      description: 휴대폰 번호
    placeId:
      type: integer
      description: 장소 아이디
    placeNam:
      type: string
      description: 장소 이름
      example: 해뜨는 동물병원
    placeSummary:
      type: string
      description: 장소 요약
    pointAmount:
      type: integer
      example: 2000
      description: 포인트
    pointGubun:
      type: string
      description: 포인트 타입
    pushOnOff:
      type: string
      description: 푸시 허용 여부
      enum:
        - 'on'
        - 'off'
    qnaId:
      type: integer
      description: Q&A 아이디
    raboratoryId:
      type: integer
      description: 팻연구소콘텐츠 아이디
    ranking:
      type: string
      description: 랭킹
    rankingOrder:
      type: string
      description: 랭킹 정렬순서
      enum:
        - 일간
        - 주간
        - 월간
        - 거리
        - 리뷰
    readCount:
      type: integer
      description: 조회수
    reason:
      type: string
      description: 사유
    receiveInformationYn:
      type: string
      description: 마케팅 활용 동의 여부
      enum:
        - 'y'
        - 'n'
    registerTime:
      type: string
      description: 작성일
      example: 23.02.15
    requiredYn:
      type: string
      example: 'y'
      description: 필수 여부
    reviewCount:
      type: integer
      example: 10
      description: 리뷰수
    reviewId:
      type: integer
      description: 리뷰 아이디
    salesHour:
      type: string
      description: 영업 시간
    sido:
      type: string
      description: 시도
      example: 서울특별시
    sigungu:
      type: string
      description: 시군구
      example: 강남구
    size:
      type: integer
      description: 페이지 크기
      example: 4
    streetNameAddress:
      type: string
      description: 주소
    termsId:
      type: integer
      example: 3
      description: 약관 아이디
    title:
      type: string
      description: 제목
    token:
      type: string
      description: 인증 토큰
    totalCount:
      type: integer
      description: 전체 글 갯수
    totalReviewCount:
      type: integer
      description: 전체 리뷰수
    usedPoint:
      type: integer
      description: 이용 포인트
    userName:
      type: string
      example: 홍길동
      description: 사용자 명
    uuid:
      type: string
      description: 디바이스 식별자
    visitorReviewCount:
      type: integer
      description: 방문자 리뷰수
    watchCount:
      type: integer
      example: 5
      description: 찜갯수
    watchGubun:
      type: string
      description: 찜 구분
      example:
        - 장소
        - 콘텐츠
        - 연구소
    watchId:
      type: integer
      description: 찜 아이디
    wayToCome1:
      type: string
      description: 오시는 길 1
    wayToCome2:
      type: string
      description: 오시는 길 2
    weekendOpenYn:
      type: string
      description: 주말 개점 여부
      enum:
        - 'y'
        - 'n'
    weelkyRanking:
      type: integer
      description: 주간 랭킹
    withdrawalCause:
      type: string
      description: 탈퇴 사유
    writeTime:
      type: string
      description: 게시글 작성일
    writer:
      type: string
      description: 작성자
      example: 고양이가 최고야
    writerName:
      type: string
      description: 작성자 이름
    youtubeUrl:
      type: string
      description: 유튜브 주소
    zipcode:
      type: string
      description: 우편 번호
      example: 06195
